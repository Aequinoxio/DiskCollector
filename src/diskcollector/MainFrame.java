/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package diskcollector;

import diskcollector.NodeTypes.NodeInformation;
import diskcollector.NodeTypes.NodeType;
import diskcollector.NodeTypes.FileNodeInformation;
import diskcollector.NodeTypes.BackupNodeInformation;
import java.awt.Cursor;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Date;
import java.util.Enumeration;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingWorker;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

/**
 *
 * @author utente
 */
public class MainFrame extends javax.swing.JFrame implements TreeSelectionListener {

    DefaultMutableTreeNode m_selectedNode; // Nodo selezionato nel jtree
    private Enumeration m_searchingNodes; // Enumeration per la ricerca, viene messo a null ogni volta che c'Ã¨ una modifica sui dati dell'albero
    private String latestDBSaveParh = "";

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();

        // Inizializzo il tree
        DefaultMutableTreeNode topNode = new DefaultMutableTreeNode(new NodeInformation(Constants.ROOT_STRING, NodeType.ROOT));
        DefaultTreeModel defaultTreeModel = new DefaultTreeModel(topNode);
        directoryTree.setModel(defaultTreeModel);
        directoryTree.addTreeSelectionListener(this);
        directoryTree.setCellRenderer(new NodeCellRenderer());
        // Uso la stessa azione del bottone cerca quando premo invio
        txtSearchText.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnNewSubTree = new javax.swing.JButton();
        btnUpdateNodeTree = new javax.swing.JButton();
        btnDeleteNodeTre = new javax.swing.JButton();
        txtSearchText = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnViewLog = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        directoryTree = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDetails = new javax.swing.JTextArea();
        btnSaveTree = new javax.swing.JButton();
        btnLoadTree = new javax.swing.JButton();
        btnNewBackup = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(930, 730));
        setPreferredSize(new java.awt.Dimension(930, 800));

        btnNewSubTree.setText("Inserisci ramo");
        btnNewSubTree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewSubTreeActionPerformed(evt);
            }
        });

        btnUpdateNodeTree.setText("Cancella ramo");
        btnUpdateNodeTree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateNodeTreeActionPerformed(evt);
            }
        });

        btnDeleteNodeTre.setText("Cancella Backup set");
        btnDeleteNodeTre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteNodeTreActionPerformed(evt);
            }
        });

        txtSearchText.setText("Cerca");

        btnSearch.setText("Cerca");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnViewLog.setText("Cancella tutto");
        btnViewLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewLogActionPerformed(evt);
            }
        });

        jSplitPane1.setMinimumSize(new java.awt.Dimension(640, 480));
        jSplitPane1.setPreferredSize(new java.awt.Dimension(640, 480));

        jScrollPane1.setMinimumSize(new java.awt.Dimension(500, 580));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(500, 580));
        jScrollPane1.setViewportView(directoryTree);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jScrollPane2.setMinimumSize(new java.awt.Dimension(580, 520));

        txtDetails.setEditable(false);
        txtDetails.setColumns(20);
        txtDetails.setRows(5);
        jScrollPane2.setViewportView(txtDetails);

        jSplitPane1.setRightComponent(jScrollPane2);

        btnSaveTree.setText("Salva tutto");
        btnSaveTree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveTreeActionPerformed(evt);
            }
        });

        btnLoadTree.setText("Carica");
        btnLoadTree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadTreeActionPerformed(evt);
            }
        });

        btnNewBackup.setText("Nuovo Backup set");
        btnNewBackup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewBackupActionPerformed(evt);
            }
        });

        jButton1.setText("insertWorker");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnNewBackup)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDeleteNodeTre)
                        .addGap(18, 18, 18)
                        .addComponent(btnNewSubTree)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdateNodeTree)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                        .addComponent(btnSaveTree)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLoadTree)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnViewLog))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(txtSearchText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearch)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNewSubTree)
                    .addComponent(btnUpdateNodeTree)
                    .addComponent(btnDeleteNodeTre)
                    .addComponent(btnViewLog)
                    .addComponent(btnSaveTree)
                    .addComponent(btnLoadTree)
                    .addComponent(btnNewBackup)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 507, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNewSubTreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewSubTreeActionPerformed
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) directoryTree.getLastSelectedPathComponent();

        //Nessuna selezione o selezionato un nodo che non Ã¨ un backup set
        if (node == null || ((NodeInformation) node.getUserObject()).getType() != NodeType.BACKUP) {
            JOptionPane.showMessageDialog(this, "Selezionare un nodo Backup", "Informazione", JOptionPane.WARNING_MESSAGE);

            return;
        }

//        int val = JOptionPane.showConfirmDialog(
//                this,
//                "Inserisco il sottoramo nel punto scelto?",
//                "Conferma",
//                JOptionPane.YES_NO_OPTION);
//        if (val != JOptionPane.YES_OPTION) {
//            return;
//        }
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Directory da leggere");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //
        // disable the "All files" option.
        //
        chooser.setAcceptAllFileFilterUsed(false);
        //    
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {

            DefaultTreeModel defaultTreeModel = (DefaultTreeModel) directoryTree.getModel();
            DefaultMutableTreeNode topNode
                    = m_selectedNode == null ? (DefaultMutableTreeNode) defaultTreeModel.getRoot() : m_selectedNode;

            FolderTreeReader.readDirectory(Paths.get(chooser.getSelectedFile().getAbsolutePath()), topNode);
            FolderTreeReader.sortTree(topNode);

            ((DefaultTreeModel) directoryTree.getModel()).reload();
            m_searchingNodes = null;

        } else {
            // System.out.println("No Selection ");
        }


    }//GEN-LAST:event_btnNewSubTreeActionPerformed

    private void btnNewSubTreeActionPerformedSwingWorker(java.awt.event.ActionEvent evt) throws InterruptedException, ExecutionException {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) directoryTree.getLastSelectedPathComponent();

        //Nessuna selezione o selezionato un nodo che non Ã¨ un backup set
        if (node == null || ((NodeInformation) node.getUserObject()).getType() != NodeType.BACKUP) {
            JOptionPane.showMessageDialog(this, "Selezionare un nodo Backup", "Informazione", JOptionPane.WARNING_MESSAGE);

            return;
        }

//        int val = JOptionPane.showConfirmDialog(
//                this,
//                "Inserisco il sottoramo nel punto scelto?",
//                "Conferma",
//                JOptionPane.YES_NO_OPTION);
//        if (val != JOptionPane.YES_OPTION) {
//            return;
//        }
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Directory da leggere");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //
        // disable the "All files" option.
        //
        chooser.setAcceptAllFileFilterUsed(false);
        //    
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {

            DefaultTreeModel defaultTreeModel = (DefaultTreeModel) directoryTree.getModel();
            DefaultMutableTreeNode topNode
                    = m_selectedNode == null ? (DefaultMutableTreeNode) defaultTreeModel.getRoot() : m_selectedNode;

//            SwingWorker swingWorker= new SwingWorker<DefaultMutableTreeNode,String>() {
//                @Override
//                protected DefaultMutableTreeNode doInBackground() throws Exception {
//                    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//                }
//            };
            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            FolderTreeReaderWorker folderTreeReaderWorker = new FolderTreeReaderWorker(Paths.get(chooser.getSelectedFile().getAbsolutePath()), topNode);
            DlgSwingWorkerLog dlgSwingWorkerLog = new DlgSwingWorkerLog(this, true, folderTreeReaderWorker);
            dlgSwingWorkerLog.startWorkerAndShow();
            //folderTreeReaderWorker.execute();
            if (folderTreeReaderWorker.isDone()&& !folderTreeReaderWorker.isCancelled()) {
                topNode = folderTreeReaderWorker.get();
            }
            folderTreeReaderWorker.sortTree(topNode);
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
//            FolderTreeReader.readDirectory(Paths.get(chooser.getSelectedFile().getAbsolutePath()), topNode);
//            FolderTreeReader.sortTree(topNode);

            ((DefaultTreeModel) directoryTree.getModel()).reload();
            m_searchingNodes = null;

        } else {
            // System.out.println("No Selection ");
        }

    }

    private void btnUpdateNodeTreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateNodeTreeActionPerformed
        // TODO add your handling code here:
        deleteSubTree();

        m_searchingNodes = null; // TODO: inserirlo dopo aver aggiornato il tree
    }//GEN-LAST:event_btnUpdateNodeTreeActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        DefaultMutableTreeNode node = searchNode(txtSearchText.getText());
        if (node != null) {
            TreeNode[] nodes = ((DefaultTreeModel) directoryTree.getModel()).getPathToRoot(node);
            TreePath path = new TreePath(nodes);
            directoryTree.scrollPathToVisible(path);
            directoryTree.setSelectionPath(path);

        } else {
            JOptionPane.showMessageDialog(this, "Non ho trovato nulla", "Ricerca", JOptionPane.WARNING_MESSAGE);
            m_searchingNodes = null;
            //System.out.println("Node with string " + txtSearchText.getText() + " not found");
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnSaveTreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveTreeActionPerformed
        saveTheTree();
    }//GEN-LAST:event_btnSaveTreeActionPerformed

    private void btnLoadTreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadTreeActionPerformed

        openTheTree();

        // ((DefaultTreeModel) directoryTree.getModel()).reload();
    }//GEN-LAST:event_btnLoadTreeActionPerformed

    private void btnViewLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewLogActionPerformed
        ((DefaultMutableTreeNode) ((DefaultTreeModel) directoryTree.getModel()).getRoot()).removeAllChildren();
        ((DefaultTreeModel) directoryTree.getModel()).reload();
        m_searchingNodes = null;
    }//GEN-LAST:event_btnViewLogActionPerformed

    private void btnNewBackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewBackupActionPerformed

//        String s = (String) JOptionPane.showInputDialog(
//                this,
//                "Label per il backup tree da inserire\nTip: usa l'ID del disco la label e\nuna data in formato inverso",
//                "Nuovo backup tree",
//                JOptionPane.PLAIN_MESSAGE,
//                null,
//                null,
//                "");
        // Personalizzo la dialog
        JTextField txtBackupSetName = new JTextField();
        JTextArea txtBackupSetDescription = new JTextArea(10, 50);
        //JPasswordField password = new JPasswordField();
        final JComponent[] inputs = new JComponent[]{
            new JLabel("Nome Backup Set"),
            txtBackupSetName,
            new JLabel("Descrizione Backup Set"),
            txtBackupSetDescription
        };
        int result = JOptionPane.showConfirmDialog(this, inputs, "Inserimendo dati Backup Set", JOptionPane.OK_CANCEL_OPTION);

        String nome;
        String desc;
        if (result == JOptionPane.OK_OPTION) {
            nome = txtBackupSetName.getText().trim();
            desc = txtBackupSetDescription.getText().trim();
        } else {
            return;
        }

//If a string was not returned, return.
        if ((nome == null) || (nome.length() == 0)) {
            return;
        }

//If you're here, the return value was the string.
        DefaultMutableTreeNode defaultMutableTreeNode = (DefaultMutableTreeNode) directoryTree.getModel().getRoot();
        defaultMutableTreeNode.add(new DefaultMutableTreeNode(new BackupNodeInformation(
                nome, desc
        )));

        //((DefaultMutableTreeNode) directoryTree.getModel().getRoot()).add(defaultMutableTreeNode);
        ((DefaultTreeModel) directoryTree.getModel()).reload();
    }//GEN-LAST:event_btnNewBackupActionPerformed

    private void btnDeleteNodeTreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteNodeTreActionPerformed

        deleteSubTree();
    }//GEN-LAST:event_btnDeleteNodeTreActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            btnNewSubTreeActionPerformedSwingWorker(evt); // TODO: sistemare finito il debug con la corretta chiamata (restyling ceo codice)
            // TODO add your handling code here:
        } catch (InterruptedException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ExecutionException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void deleteSubTree() {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) directoryTree.getLastSelectedPathComponent();
        if (node == null) { //Nothing is selected.     
            JOptionPane.showMessageDialog(this, "Selezionare un nodo", "Attenzione", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Cancello solo i nodi Backup o filder TODO: Da rivedere sulla abse dell'UX
        NodeType nt = ((NodeInformation) node.getUserObject()).getType();
        if (nt == NodeType.BACKUP || nt == NodeType.FOLDER) {
            int val = JOptionPane.showConfirmDialog(
                    this,
                    "Cancello il sottoramo?",
                    "Conferma",
                    JOptionPane.YES_NO_OPTION);
            if (val != JOptionPane.YES_OPTION) {
                return;
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selezionare un nodo Backup set o Folder", "Attenzione", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Salvo il Parent per poter lasciare aperto il tree
        TreeNode tn = node.getParent();
        // Sono sulla root per cui non la cancello
        if (tn == null) {
            JOptionPane.showMessageDialog(
                    this,
                    "Non Ã¨ possibile cancellare questo nodo",
                    "Attenzione",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Ok a questo punto posso cancellare il nodo
        node.removeFromParent();
        //((DefaultTreeModel) directoryTree.getModel()).reload();
        ((DefaultTreeModel) directoryTree.getModel()).reload(tn);
        m_searchingNodes = null; // TODO: inserirlo dopo aver aggiornato il tree

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    /**
     * Recupera i dettagli e li mostra TODO: Da completare per ora Ã¨ solo un
     * placeholder
     *
     * @param e Evento
     */
    public void valueChanged(TreeSelectionEvent e) {
        //Returns the last path element of the selection.
        //This method is useful only when the selection model allows a single selection.
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) directoryTree.getLastSelectedPathComponent();

        if (node == null) //Nothing is selected.     
        {
            return;
        }

        NodeInformation nodeInfo = (NodeInformation) node.getUserObject();
        m_selectedNode = node;
        String fileDetails;
        StringBuilder sb = new StringBuilder();

        // sb.append(nodeInfo.toString());
        if (node.isRoot()) {
            sb = sb.append(" << ROOT >>").append("\n");
        } else {

            switch (nodeInfo.getType()) {
                case BACKUP: {
                    sb.append("<< Backup set  >>").append("\n");
                    sb.append(nodeInfo.toString()).append("\n");
                    sb.append(((BackupNodeInformation) nodeInfo).getDetails()).append("\n");
                }
                break;
                case FOLDER:
                    sb = sb.append(" << DIRECTORY >>").append("\n");
                    sb.append(nodeInfo.toString()).append("\n");
                    break;
                case FILE: {
                    sb = sb.append(" << FILE >>").append("\n");
                    sb.append(nodeInfo.toString()).append("\n");
                    sb.append(((FileNodeInformation) nodeInfo).getPath()).append("\n");
                }
                break;

                case EMPTY_PLACEHOLDER: {
                    sb.append(nodeInfo.toString()).append("\n");
                    sb.append(nodeInfo.getDisplayString()).append("\n");
                }
                break;

                case GENERIC: {
                    sb.append(nodeInfo.toString()).append("\n");
                    System.out.println("");
                }
                break;

            }
        }
//        if (nodeInfo instanceof FileNodeInformation) {
//            Date d = ((FileNodeInformation) nodeInfo).getLastModifiedDateTime();
//            sb.append("\n").append("LastModified: ").append(d.toString()).append("\n");
////            System.out.println( nodeInfo.getDisplayString());
//        }
        if (nodeInfo.getType() == NodeType.FILE) {
            Date d = ((FileNodeInformation) nodeInfo).getLastModifiedDateTime();
            sb.append("\n").append("LastModified: ").append(d.toString()).append("\n");
        }

        fileDetails = sb.toString();
        displayDetails(fileDetails);
    }

    private void displayDetails(String detail) {
        txtDetails.setText(detail);
    }

    public DefaultMutableTreeNode searchNode(String nodeStr) {
        DefaultMutableTreeNode node = null;
        //Enumeration e = ((DefaultMutableTreeNode) directoryTree.getModel().getRoot()).depthFirstEnumeration();
        if (m_searchingNodes == null || !m_searchingNodes.hasMoreElements()) {
            m_searchingNodes = ((DefaultMutableTreeNode) directoryTree.getModel().getRoot()).depthFirstEnumeration();
        }
        Pattern pattern = Pattern.compile(nodeStr);
        while (m_searchingNodes.hasMoreElements()) {
            node = (DefaultMutableTreeNode) m_searchingNodes.nextElement();
            Matcher matcher = pattern.matcher(node.getUserObject().toString());
            if (matcher.find()) {
                return node;
            }

//            if (nodeStr.equals(node.getUserObject().toString())
//                    || (node.getUserObject().toString().endsWith(nodeStr))) {
//                return node;
//            }
        }
        return null;
    }

    // TODO: Scegliere il file
    public void saveTheTree() {

        JFileChooser chooser = new JFileChooser();
        Path currentPath = Paths.get(Constants.getInstance().getLatestSavePath() + File.separator + Constants.getInstance().getLatestSaveFilename());
        chooser.setSelectedFile(new File(currentPath.toAbsolutePath().toString()));
        chooser.setDialogTitle("Salvo il DB");
        //chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //
        // disable the "All files" option.
        //
        chooser.setAcceptAllFileFilterUsed(true);

        //    
        if (chooser.showSaveDialog(this) != JFileChooser.APPROVE_OPTION) {
            return;
        }

        if (chooser.getSelectedFile().exists()) {
            int val = JOptionPane.showConfirmDialog(
                    this,
                    "Il file esiste, lo sovrascrivo?",
                    "Conferma",
                    JOptionPane.YES_NO_OPTION);
            if (val != JOptionPane.YES_OPTION) {
                return;
            }
        }

        Constants.getInstance().setLatestSavePath(chooser.getSelectedFile().getParent());
        Constants.getInstance().setLatestSaveFilename(chooser.getSelectedFile().getName());

        TreeModel tm = directoryTree.getModel();   //tree is of type MyTree which extends JTree. It creates a tree from an XML document
        //latestDBSaveParh = chooser.getSelectedFile().getParent(); // Salvo la posizione corrente
        try {
            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(chooser.getSelectedFile().getAbsolutePath()));

            out.writeObject(tm);//the actual tree object
            out.flush();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void openTheTree() {
        JFileChooser chooser = new JFileChooser();
        Path currentPath = Paths.get(Constants.getInstance().getLatestSavePath() + File.separator + Constants.getInstance().getLatestSaveFilename());
        chooser.setSelectedFile(new File(currentPath.toAbsolutePath().toString()));
        chooser.setDialogTitle("Salvo il DB");
        //chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //
        // disable the "All files" option.
        //
        chooser.setAcceptAllFileFilterUsed(true);

        //    
        if (chooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) {
            return;
        }

        // Salvo la posizione corrente
        Constants.getInstance().setLatestSavePath(chooser.getSelectedFile().getParent());
        Constants.getInstance().setLatestSaveFilename(chooser.getSelectedFile().getName());

        //latestDBSaveParh = chooser.getSelectedFile().getParent();
        m_searchingNodes = null; // reinizializzo la ricerca

        try {
            // TODO: usare uno swingworker per caricare il file ed impostare correttamente il cursore prima e dopo il caricamento
            ObjectInputStream in = new ObjectInputStream(new FileInputStream(chooser.getSelectedFile().getAbsolutePath()));
            TreeModel atm = (TreeModel) in.readObject();
            in.close();

            // Cancello tutto il tree
            DefaultTreeModel defaultTreeModel = new DefaultTreeModel(null);
            directoryTree.setModel(defaultTreeModel);
            ((DefaultTreeModel) directoryTree.getModel()).reload();

            // Aggiono il modello
            directoryTree.setModel(atm);
            ((DefaultTreeModel) directoryTree.getModel()).reload();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteNodeTre;
    private javax.swing.JButton btnLoadTree;
    private javax.swing.JButton btnNewBackup;
    private javax.swing.JButton btnNewSubTree;
    private javax.swing.JButton btnSaveTree;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdateNodeTree;
    private javax.swing.JButton btnViewLog;
    private javax.swing.JTree directoryTree;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextArea txtDetails;
    private javax.swing.JTextField txtSearchText;
    // End of variables declaration//GEN-END:variables

}
